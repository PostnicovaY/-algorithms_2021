"""
2. Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6. Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака. Объяснить полученный результат.
"""


first_num = 5
second_num = 6

# Битовый оператор ИЛИ (OR) есть бинарным и обозначается символом |. Оператор реализует побитовое логическое сложение по образцу операторов & и ^
bit_or = first_num | second_num
print(" OR: %s" % bin(bit_or))

# Битовый оператор И (AND) есть бинарным и выполняет побитовое «И» для каждой пары битов операндов, которые размещаются слева и справа от знака оператора &
bit_and = first_num & second_num
print("AND: %s" % bin(bit_and))

# Битовый оператор исключающего ИЛИ (XOR) обозначается символом ^ и выполняет операцию сложения по модулю 2 для любого бита операндов
bit_xor = first_num ^ second_num
print("XOR: %s" % bin(bit_xor))

# ~ (инверсия) значение любого бита числа изменяется на противоположное
bit_not_n1 = ~first_num
bit_not_n2 = ~second_num
print("NOT_1: %s" % bin(bit_not_n1))
print("NOT_2: %s" % bin(bit_not_n2))

# Операторы сдвига влево << и сдвига вправо >> сдвигают каждый бит на одну или несколько позиций влево или вправо
# Т.е. Если нужно помножить число на 16, то нужно сдвинуть это число на 4 бита влево. Если нужно разделить число на 8, то нужно сдвинуть это число на 3 бита вправо. Скорость выполнения операций сдвига выше в сравнении с операциями умножения и деления на числа кратные 2 в степени N (N – количество сдвинутых бит).
bit_shift_right = first_num >> 2
print("NOT_1: %s" % bit_shift_right)

bit_shift_left = first_num << 2
print("NOT_1: %s" % bit_shift_left)

