"""
1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи. Результаты анализа вставьте в виде комментариев к коду. Также укажите в комментариях версию Python и разрядность вашей ОС.
"""

''' Версия Python: python 3.9 x64
ОС: Windows 10 x64 '''

import sys

# Урок 1, задача № 1.

def calculator():
    try:
        three_digit_number = int(input('Введите трехзначное число или 0 для выхода'))

        if three_digit_number == 0:
            return

        if three_digit_number <= 99 or three_digit_number > 999:
            return calculator()

        d1 = three_digit_number % 10
        d2 = three_digit_number % 100 // 10
        d3 = three_digit_number // 100
        sum_member = sys.getsizeof(three_digit_number) + sys.getsizeof(d1) + sys.getsizeof(d2) + sys.getsizeof(d3)
        print('В программе задействовано байт памяти: {}'.format(sum_member))


    except ValueError:
        print('Вы вместо трехзначного числа ввели строку (((. Исправьтесь')

    return calculator()


calculator()


# --------------------------------------------------------------------------------------------------

# Урок 2, задача № 7.

n = int(input('Введите число'))
s = 0
for i in range(1, n + 1):
    s += i
m = n * (n + 1) // 2
sum_member_2 = sys.getsizeof(n) + sys.getsizeof(s) + sys.getsizeof(m)
print('В программе задействовано байт памяти: {}'.format(sum_member_2))

# В программе у нас количество цифр в вводимом числе неограничено, поэтому
# затраты памяти напрямую зависят от того, какой длинны число будет введено.

# --------------------------------------------------------------------------------------------------

# Урок 2, задача № 2. Во втором массиве сохранить индексы четных элементов первого
# массива. Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, то во
# второй массив надо заполнить значениями 1, 4, 5, 6 (или 0, 3, 4, 5 – если
# индексация начинается с нуля), т.к. именно в этих позициях первого массива стоят четные числа.
def computation():
    print("Введите координаты точки A(x1;y1):")
    x1 = float(input("\tx1 = "))
    y1 = float(input("\ty1 = "))

    print("Введите координаты точки B(x2;y2):")
    x2 = float(input("\tx2 = "))
    if x1 == x2:
        print('Вертикальная прямая не является графиком функции! (x1 не может быть равным x2) Исправьтесь!')
        return computation()

    y2 = float(input("\ty2 = "))

    print("Уравнение прямой, проходящей через эти точки:")
    k = (y1 - y2) / (x1 - x2)
    b = y2 - k * x2
    sum_member_3 = sys.getsizeof(x1) + sys.getsizeof(y1) + sys.getsizeof(x2) + sys.getsizeof(y2) + sys.getsizeof(k) + sys.getsizeof(b)
    print('В программе задействовано байт памяти: {}'.format(sum_member_3))
    print(" y = %.2f*x + %.2f" % (k, b))


computation()

# --------------------------------------------------------------------------------------------------
'''
ИТОГ: Судя по данным, программы с наиболее эффективным использованием памяти - это первая,
так как ее потребление памяти будет константным и предсказуемым за счет заранее определенных размеров переменных
(число из трех цифр).
Вторая и третья программы зависят от количества цифр, из которых будут состоять введенные числа.
'''
